<?php
/**
 * PhishingDetectionEmailAdvancedResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * phishingapi
 *
 * Easily and directly scan and block phishing security threats in input.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PhishingDetectionEmailAdvancedResponse Class Doc Comment
 *
 * @category Class
 * @description Result of detecting phishing using AI
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhishingDetectionEmailAdvancedResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PhishingDetectionEmailAdvancedResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clean_result' => 'bool',
        'phishing_risk_level' => 'double',
        'spam_risk_level' => 'double',
        'contains_low_reputation_sender' => 'bool',
        'contains_phishing' => 'bool',
        'contains_spam' => 'bool',
        'contains_unsolicited_sales' => 'bool',
        'contains_promotional_content' => 'bool',
        'contains_phishing_attempt' => 'bool',
        'analysis_rationale' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clean_result' => null,
        'phishing_risk_level' => 'double',
        'spam_risk_level' => 'double',
        'contains_low_reputation_sender' => null,
        'contains_phishing' => null,
        'contains_spam' => null,
        'contains_unsolicited_sales' => null,
        'contains_promotional_content' => null,
        'contains_phishing_attempt' => null,
        'analysis_rationale' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clean_result' => 'CleanResult',
        'phishing_risk_level' => 'PhishingRiskLevel',
        'spam_risk_level' => 'SpamRiskLevel',
        'contains_low_reputation_sender' => 'ContainsLowReputationSender',
        'contains_phishing' => 'ContainsPhishing',
        'contains_spam' => 'ContainsSpam',
        'contains_unsolicited_sales' => 'ContainsUnsolicitedSales',
        'contains_promotional_content' => 'ContainsPromotionalContent',
        'contains_phishing_attempt' => 'ContainsPhishingAttempt',
        'analysis_rationale' => 'AnalysisRationale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clean_result' => 'setCleanResult',
        'phishing_risk_level' => 'setPhishingRiskLevel',
        'spam_risk_level' => 'setSpamRiskLevel',
        'contains_low_reputation_sender' => 'setContainsLowReputationSender',
        'contains_phishing' => 'setContainsPhishing',
        'contains_spam' => 'setContainsSpam',
        'contains_unsolicited_sales' => 'setContainsUnsolicitedSales',
        'contains_promotional_content' => 'setContainsPromotionalContent',
        'contains_phishing_attempt' => 'setContainsPhishingAttempt',
        'analysis_rationale' => 'setAnalysisRationale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clean_result' => 'getCleanResult',
        'phishing_risk_level' => 'getPhishingRiskLevel',
        'spam_risk_level' => 'getSpamRiskLevel',
        'contains_low_reputation_sender' => 'getContainsLowReputationSender',
        'contains_phishing' => 'getContainsPhishing',
        'contains_spam' => 'getContainsSpam',
        'contains_unsolicited_sales' => 'getContainsUnsolicitedSales',
        'contains_promotional_content' => 'getContainsPromotionalContent',
        'contains_phishing_attempt' => 'getContainsPhishingAttempt',
        'analysis_rationale' => 'getAnalysisRationale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clean_result'] = isset($data['clean_result']) ? $data['clean_result'] : null;
        $this->container['phishing_risk_level'] = isset($data['phishing_risk_level']) ? $data['phishing_risk_level'] : null;
        $this->container['spam_risk_level'] = isset($data['spam_risk_level']) ? $data['spam_risk_level'] : null;
        $this->container['contains_low_reputation_sender'] = isset($data['contains_low_reputation_sender']) ? $data['contains_low_reputation_sender'] : null;
        $this->container['contains_phishing'] = isset($data['contains_phishing']) ? $data['contains_phishing'] : null;
        $this->container['contains_spam'] = isset($data['contains_spam']) ? $data['contains_spam'] : null;
        $this->container['contains_unsolicited_sales'] = isset($data['contains_unsolicited_sales']) ? $data['contains_unsolicited_sales'] : null;
        $this->container['contains_promotional_content'] = isset($data['contains_promotional_content']) ? $data['contains_promotional_content'] : null;
        $this->container['contains_phishing_attempt'] = isset($data['contains_phishing_attempt']) ? $data['contains_phishing_attempt'] : null;
        $this->container['analysis_rationale'] = isset($data['analysis_rationale']) ? $data['analysis_rationale'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clean_result
     *
     * @return bool
     */
    public function getCleanResult()
    {
        return $this->container['clean_result'];
    }

    /**
     * Sets clean_result
     *
     * @param bool $clean_result True if the result is not phishing (clean), and false otherwise
     *
     * @return $this
     */
    public function setCleanResult($clean_result)
    {
        $this->container['clean_result'] = $clean_result;

        return $this;
    }

    /**
     * Gets phishing_risk_level
     *
     * @return double
     */
    public function getPhishingRiskLevel()
    {
        return $this->container['phishing_risk_level'];
    }

    /**
     * Sets phishing_risk_level
     *
     * @param double $phishing_risk_level Overall phishing risk level between 0.0 and 1.0
     *
     * @return $this
     */
    public function setPhishingRiskLevel($phishing_risk_level)
    {
        $this->container['phishing_risk_level'] = $phishing_risk_level;

        return $this;
    }

    /**
     * Gets spam_risk_level
     *
     * @return double
     */
    public function getSpamRiskLevel()
    {
        return $this->container['spam_risk_level'];
    }

    /**
     * Sets spam_risk_level
     *
     * @param double $spam_risk_level Overall phishing spam level between 0.0 and 1.0
     *
     * @return $this
     */
    public function setSpamRiskLevel($spam_risk_level)
    {
        $this->container['spam_risk_level'] = $spam_risk_level;

        return $this;
    }

    /**
     * Gets contains_low_reputation_sender
     *
     * @return bool
     */
    public function getContainsLowReputationSender()
    {
        return $this->container['contains_low_reputation_sender'];
    }

    /**
     * Sets contains_low_reputation_sender
     *
     * @param bool $contains_low_reputation_sender True if the input email is from a low reputation sender
     *
     * @return $this
     */
    public function setContainsLowReputationSender($contains_low_reputation_sender)
    {
        $this->container['contains_low_reputation_sender'] = $contains_low_reputation_sender;

        return $this;
    }

    /**
     * Gets contains_phishing
     *
     * @return bool
     */
    public function getContainsPhishing()
    {
        return $this->container['contains_phishing'];
    }

    /**
     * Sets contains_phishing
     *
     * @param bool $contains_phishing True if the input email contains phishing threat risks, false otherwise
     *
     * @return $this
     */
    public function setContainsPhishing($contains_phishing)
    {
        $this->container['contains_phishing'] = $contains_phishing;

        return $this;
    }

    /**
     * Gets contains_spam
     *
     * @return bool
     */
    public function getContainsSpam()
    {
        return $this->container['contains_spam'];
    }

    /**
     * Sets contains_spam
     *
     * @param bool $contains_spam True if the email contains phishing threat risks, false otherwise
     *
     * @return $this
     */
    public function setContainsSpam($contains_spam)
    {
        $this->container['contains_spam'] = $contains_spam;

        return $this;
    }

    /**
     * Gets contains_unsolicited_sales
     *
     * @return bool
     */
    public function getContainsUnsolicitedSales()
    {
        return $this->container['contains_unsolicited_sales'];
    }

    /**
     * Sets contains_unsolicited_sales
     *
     * @param bool $contains_unsolicited_sales True if the input email contains unsolicited sales, false otherwise
     *
     * @return $this
     */
    public function setContainsUnsolicitedSales($contains_unsolicited_sales)
    {
        $this->container['contains_unsolicited_sales'] = $contains_unsolicited_sales;

        return $this;
    }

    /**
     * Gets contains_promotional_content
     *
     * @return bool
     */
    public function getContainsPromotionalContent()
    {
        return $this->container['contains_promotional_content'];
    }

    /**
     * Sets contains_promotional_content
     *
     * @param bool $contains_promotional_content True if the input email contains promotional content, false otherwise
     *
     * @return $this
     */
    public function setContainsPromotionalContent($contains_promotional_content)
    {
        $this->container['contains_promotional_content'] = $contains_promotional_content;

        return $this;
    }

    /**
     * Gets contains_phishing_attempt
     *
     * @return bool
     */
    public function getContainsPhishingAttempt()
    {
        return $this->container['contains_phishing_attempt'];
    }

    /**
     * Sets contains_phishing_attempt
     *
     * @param bool $contains_phishing_attempt True if the input email contains a phishing attempt, false otherwise
     *
     * @return $this
     */
    public function setContainsPhishingAttempt($contains_phishing_attempt)
    {
        $this->container['contains_phishing_attempt'] = $contains_phishing_attempt;

        return $this;
    }

    /**
     * Gets analysis_rationale
     *
     * @return string
     */
    public function getAnalysisRationale()
    {
        return $this->container['analysis_rationale'];
    }

    /**
     * Sets analysis_rationale
     *
     * @param string $analysis_rationale Rationale for why the conclusion was formed
     *
     * @return $this
     */
    public function setAnalysisRationale($analysis_rationale)
    {
        $this->container['analysis_rationale'] = $analysis_rationale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


