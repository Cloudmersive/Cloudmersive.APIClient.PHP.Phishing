<?php
/**
 * AdvancedEmailDetectionRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * phishingapi
 *
 * Easily and directly scan and block phishing security threats in input.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AdvancedEmailDetectionRequest Class Doc Comment
 *
 * @category Class
 * @description Request to detect phishing from an email
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdvancedEmailDetectionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdvancedEmailDetectionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from_email_address' => 'string',
        'to_email_address' => 'string',
        'subject' => 'string',
        'html_body' => 'string',
        'allow_low_reputation_senders' => 'bool',
        'allow_sanctioned' => 'bool',
        'input_email_file' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from_email_address' => null,
        'to_email_address' => null,
        'subject' => null,
        'html_body' => null,
        'allow_low_reputation_senders' => null,
        'allow_sanctioned' => null,
        'input_email_file' => 'byte'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_email_address' => 'FromEmailAddress',
        'to_email_address' => 'ToEmailAddress',
        'subject' => 'Subject',
        'html_body' => 'HtmlBody',
        'allow_low_reputation_senders' => 'AllowLowReputationSenders',
        'allow_sanctioned' => 'AllowSanctioned',
        'input_email_file' => 'InputEmailFile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_email_address' => 'setFromEmailAddress',
        'to_email_address' => 'setToEmailAddress',
        'subject' => 'setSubject',
        'html_body' => 'setHtmlBody',
        'allow_low_reputation_senders' => 'setAllowLowReputationSenders',
        'allow_sanctioned' => 'setAllowSanctioned',
        'input_email_file' => 'setInputEmailFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_email_address' => 'getFromEmailAddress',
        'to_email_address' => 'getToEmailAddress',
        'subject' => 'getSubject',
        'html_body' => 'getHtmlBody',
        'allow_low_reputation_senders' => 'getAllowLowReputationSenders',
        'allow_sanctioned' => 'getAllowSanctioned',
        'input_email_file' => 'getInputEmailFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from_email_address'] = isset($data['from_email_address']) ? $data['from_email_address'] : null;
        $this->container['to_email_address'] = isset($data['to_email_address']) ? $data['to_email_address'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['html_body'] = isset($data['html_body']) ? $data['html_body'] : null;
        $this->container['allow_low_reputation_senders'] = isset($data['allow_low_reputation_senders']) ? $data['allow_low_reputation_senders'] : null;
        $this->container['allow_sanctioned'] = isset($data['allow_sanctioned']) ? $data['allow_sanctioned'] : null;
        $this->container['input_email_file'] = isset($data['input_email_file']) ? $data['input_email_file'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['input_email_file']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['input_email_file'])) {
            $invalidProperties[] = "invalid value for 'input_email_file', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_email_address
     *
     * @return string
     */
    public function getFromEmailAddress()
    {
        return $this->container['from_email_address'];
    }

    /**
     * Sets from_email_address
     *
     * @param string $from_email_address Email address of the sender
     *
     * @return $this
     */
    public function setFromEmailAddress($from_email_address)
    {
        $this->container['from_email_address'] = $from_email_address;

        return $this;
    }

    /**
     * Gets to_email_address
     *
     * @return string
     */
    public function getToEmailAddress()
    {
        return $this->container['to_email_address'];
    }

    /**
     * Sets to_email_address
     *
     * @param string $to_email_address Email address of the recipient
     *
     * @return $this
     */
    public function setToEmailAddress($to_email_address)
    {
        $this->container['to_email_address'] = $to_email_address;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of the email
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets html_body
     *
     * @return string
     */
    public function getHtmlBody()
    {
        return $this->container['html_body'];
    }

    /**
     * Sets html_body
     *
     * @param string $html_body Body of the email in HTML, or text
     *
     * @return $this
     */
    public function setHtmlBody($html_body)
    {
        $this->container['html_body'] = $html_body;

        return $this;
    }

    /**
     * Gets allow_low_reputation_senders
     *
     * @return bool
     */
    public function getAllowLowReputationSenders()
    {
        return $this->container['allow_low_reputation_senders'];
    }

    /**
     * Sets allow_low_reputation_senders
     *
     * @param bool $allow_low_reputation_senders Allow email from low reputation senders and domains
     *
     * @return $this
     */
    public function setAllowLowReputationSenders($allow_low_reputation_senders)
    {
        $this->container['allow_low_reputation_senders'] = $allow_low_reputation_senders;

        return $this;
    }

    /**
     * Gets allow_sanctioned
     *
     * @return bool
     */
    public function getAllowSanctioned()
    {
        return $this->container['allow_sanctioned'];
    }

    /**
     * Sets allow_sanctioned
     *
     * @param bool $allow_sanctioned True to allow sanctioned countries and certain known sanctioned entities, false otherwise (default)
     *
     * @return $this
     */
    public function setAllowSanctioned($allow_sanctioned)
    {
        $this->container['allow_sanctioned'] = $allow_sanctioned;

        return $this;
    }

    /**
     * Gets input_email_file
     *
     * @return string
     */
    public function getInputEmailFile()
    {
        return $this->container['input_email_file'];
    }

    /**
     * Sets input_email_file
     *
     * @param string $input_email_file input_email_file
     *
     * @return $this
     */
    public function setInputEmailFile($input_email_file)
    {

        if (!is_null($input_email_file) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $input_email_file))) {
            throw new \InvalidArgumentException("invalid value for $input_email_file when calling AdvancedEmailDetectionRequest., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['input_email_file'] = $input_email_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


